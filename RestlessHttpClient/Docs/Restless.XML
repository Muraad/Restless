<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Restless</name>
    </assembly>
    <members>
        <member name="T:Nulands.Restless.ContentTypeAttribute">
            <summary>
            If ContentTypeAttribute is set in front of a method parameter,
            the parameter value is supposed to be added to the
            request as serialzed content.
            </summary>
        </member>
        <member name="T:Nulands.Restless.ParameterType">
            <summary>
            Parameter type enum. Query, FormUrlEncoded or Url.
            </summary>
        </member>
        <member name="F:Nulands.Restless.ParameterType.Query">
            <summary>
            Parameter is added to the URL as query parameter (?name=value).
            </summary>
        </member>
        <member name="F:Nulands.Restless.ParameterType.FormUrlEncoded">
            <summary>
            Parameter is added to a POST request with FormUrlEncoded Http content.
            </summary>
        </member>
        <member name="F:Nulands.Restless.ParameterType.Url">
            <summary>
            Parameter is used to format the URL string (replaces a {name}).
            </summary>
        </member>
        <member name="T:Nulands.Restless.RestRequest">
            <summary>
            Base class for a RestRequest based on HttpWebRequest.
            Protected methods are commented in RestRequest.
            If a custom RestRequest is needed, then subclass BaseRestRequest.
            Make a public "new" method that delegates to the BaseRestRequest protected method if some
            base methods are needed. 
            Otherwise the new class has a "clean" interface, and only higher level methods are exposed public.
            See RestRequest.
            </summary>
            <remarks>Currently the BaseRestRequest does not verify that the underlying HttpRequestMessage.Content
            is set correctly. The developer is responsible for setting a correct HttpContent.
            For example a POST request should use FormUrlEncoded content when parameters are needed...</remarks>
        </member>
        <member name="F:Nulands.Restless.RestRequest.content_handler">
            <summary>
            Content (de)serialization handler.
            </summary>
        </member>
        <member name="F:Nulands.Restless.RestRequest.query_params">
            <summary>
            Url query parameters: ?name=value
            </summary>
        </member>
        <member name="F:Nulands.Restless.RestRequest.param">
            <summary>
            When method is GET then added as query parameters too.
            Otherwise added as FormUrlEncoded parameters: name=value
            </summary>
        </member>
        <member name="F:Nulands.Restless.RestRequest.url_params">
            <summary>
            Url parameters ../{name}.
            </summary>
        </member>
        <member name="F:Nulands.Restless.RestRequest.url">
            <summary>
            The url string. Can contain {name} and/or format strings {0}.
            </summary>
        </member>
        <member name="F:Nulands.Restless.RestRequest.urlFormatParams">
            <summary>
            Last url format {} set with UrlFormat.
            </summary>
        </member>
        <member name="F:Nulands.Restless.RestRequest.cancellation">
            <summary>
            A CancellationToken that is used in buildAndSendRequest (client.sendAsync(.., cancellation)).
            </summary>
        </member>
        <member name="F:Nulands.Restless.RestRequest.client">
            <summary>
            HttpClient used to send the request message.
            </summary>
        </member>
        <member name="F:Nulands.Restless.RestRequest.request">
            <summary>
            Internal request message.
            </summary>
        </member>
        <member name="M:Nulands.Restless.RestRequest.#ctor(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpClient)">
            <summary>
            Constructor.
            </summary>
            <param name="defaultRequest">The initial request message, or null if not used.</param>
            <param name="httpClient">The initial http client, or null if not used.</param>
        </member>
        <member name="M:Nulands.Restless.RestRequest.buildAndSendRequest``1(System.Action{Nulands.Restless.RestResponse{``0}},System.Action{Nulands.Restless.RestResponse{``0}})">
            <summary>
            A helper function that is doing all the "hard" work setting up the request and sending it.
            1) The Url is formated using String.Format if UrlParamÂ´s where added.
            2) The query parameter are added to the URL with RestlessExtensions.CreateRequestUri
            3) The request is send.
            4) The RestResponse is set. 
            </summary>
            <typeparam name="T">The type of the deserialized data. Set to IVoid if no deserialization is wanted.</typeparam>
            <param name="successAction">Action that is called on success. (No exceptions and HttpStatus code is ok).</param>
            <param name="errorAction">Action that is called when an error occures. (Exceptions or HttpStatus code not ok).</param>
            <returns>A taks containing the RestResponse with the deserialized data if T is not IVoid and no error occured.</returns>
        </member>
        <member name="M:Nulands.Restless.RestRequest.containsParam(System.String)">
            <summary>
            Check if param contains a value for the given name already
            </summary>
            <param name="name">The parameter name.</param>
            <returns>True if already containing value for given name, false otherwise.</returns>
        </member>
        <member name="M:Nulands.Restless.RestRequest.GetHandler(System.String)">
            <summary>
            Retrieve the handler for the specified MIME content type
            </summary>
            <param name="contentType">MIME content type to retrieve</param>
            <returns>IDeserializer instance</returns>
        </member>
        <member name="M:Nulands.Restless.RestRequest.Dispose">
            <summary>
            Dispose the request.
            </summary>
        </member>
        <member name="M:Nulands.Restless.RestRequest.Dispose(System.Boolean)">
            <summary>
            Underlying dispose method.
            Calls HttpClient and HttpRequestMessage Dispose().
            </summary>
            <param name="disposing">True if should dispose.</param>
        </member>
        <member name="P:Nulands.Restless.RestRequest.CancellationToken">
            <summary>
            The CancellationToken for this request.
            </summary>
        </member>
        <member name="P:Nulands.Restless.RestRequest.HttpClient">
            <summary>
            HttpClient property.
            </summary>
        </member>
        <member name="P:Nulands.Restless.RestRequest.Request">
            <summary>
            HttpRequestMessage property.
            </summary>
        </member>
        <member name="M:Nulands.Restless.Dynamic.DynamicRequest.parseMethodAttributes(System.Reflection.MethodInfo)">
            <summary>
            Get all method and parameter attributes for a given MethodInfo.
            </summary>
            <param name="method">The given MethodInfo.</param>
            <returns>The MethodAttributesInfo containing all method and parameter attributes.</returns>
        </member>
        <member name="M:Nulands.Restless.Dynamic.DynamicRequest.createParamAttrFunction(Nulands.Restless.Dynamic.ParameterAttributeInfo)">
            <summary>
            Creates a function thats does an action on a RestRequest, 
            depending on the given ParameterAttributeInfo.
            </summary>
            <param name="paramInfo">The parameter attribute info.</param>
            <returns>The function.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Method``1(``0,System.String)">
            <summary>
            Sets the HttpMethod given by string.
            </summary>
            <param name="method">The HttpMethod string. For example "GET".</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Get``1(``0)">
            <summary>
            Set the HttpMethod to GET.
            </summary>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Head``1(``0)">
            <summary>
            Set the HttpMethod to HEAD.
            </summary>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Post``1(``0)">
            <summary>
            Set the HttpMethod to POST.
            </summary>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Put``1(``0)">
            <summary>
            Set the HttpMethod to PUT.
            </summary>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Delete``1(``0)">
            <summary>
            Set the HttpMethod to DELETE.
            </summary>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Trace``1(``0)">
            <summary>
            Set the HttpMethod to TRACE.
            </summary>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Connect``1(``0)">
            <summary>
            Set the HttpMethod to CONNECT.
            </summary>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.AddContent``1(``0,System.Net.Http.HttpContent,System.String,System.String)">
            <summary>
            Adds a HttpContent to the Request.
            Multiple contents can be set. 
            For example first a MultipartContent can be added with AddMultipart(..).
            Then a StreamContent can be added to this MultipartContent with AddStream(..).
            If the underlying request.Content is a MultipartContent or MultipartFormDataContent
            -> the content is added to this MultipartContent.
            Otherwise the request.Content is simply set to the given content.
            </summary>
            <param name="content">The HttpContent.</param>
            <param name="name">A name can be needed when content is a MultipartFormDataContent already.</param>
            <param name="fileName">A file name can be needed when content is a MultipartFormDataContent already.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.ClearContent``1(``0)">
            <summary>
            Sets the underlying HttpContent to null.
            </summary>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.AddByteArray``1(``0,System.Byte[],System.String,System.String)">
            <summary>
            Adds a ByteArrayContent to the request.
            </summary>
            <param name="buffer">The buffer containing data.</param>
            <param name="name">A name is needed if underlying HttpContent is MultipartFormDataContent. (for example multiple file uploads)</param>
            <param name="fileName">A file name is needed if underlying HttpContent is MultipartFormDataContent.</param>
            <returns>this</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.AddFormUrl``1(``0,System.String[])">
            <summary>
            Adds a FormUrlEncodedContent to the request.
            If kvPairs are given and kvPairs.Length % 2 is even and length is not zero
            the kvPairs array is treated as a key value pair list. 
            These key-value pairs are added to the FormUrlEncodedContent on construction.
            If no kvPairs are given all parameters added with Param(..) are added to the new 
            FromUrlEncodedContent.
            </summary>
            <param name="kvPairs">The list of key-value pairs. Must contain an even number of string objects if used.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.AddMultipart``1(``0,System.String,System.String)">
            <summary>
            Adds a MultipartContent to the request.
            </summary>
            <param name="subtype">The sub type if needed.</param>
            <param name="boundary">The boundary if needed.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.AddMultipartForm``1(``0,System.String)">
            <summary>
            Adds a MultipartFormDataContent to the request.
            </summary>
            <param name="boundary">The boundary if needed.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.AddStream``1(``0,System.IO.Stream,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds a StreamContent to the request.
            </summary>
            <param name="stream">The stream to be added.</param>
            <param name="mediaType">The media type of the stream.</param>
            <param name="buffersize">The buffer size used to process the stream. Default is 1024.</param>
            <param name="name">A name needed when content is a MultipartFormDataContent already.</param>
            <param name="fileName">A file name needed when content is a MultipartFormDataContent already.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.AddString``1(``0,System.String,System.Text.Encoding,System.String,System.String,System.String)">
            <summary>
            Adds a StringContent to the request.
            </summary>
            <param name="content">The string content.</param>
            <param name="encoding">The content encoding.</param>
            <param name="mediaType">The content media type.</param>
            <param name="name">A name needed when content is a MultipartFormDataContent already.</param>
            <param name="fileName">A file name needed when content is a MultipartFormDataContent already.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.AddJson``1(``0,System.Object,System.String,System.String)">
            <summary>
            Adds an object as serialized json string.
            </summary>
            <remarks>Throws exception if the given object is null, or if the
            serialized json string is null or empty.</remarks>
            <param name="obj">The object that will be serialized and added as json string content.</param>
            <param name="name">A name needed when content is a MultipartFormDataContent already.</param>
            <param name="fileName">A file name needed when content is a MultipartFormDataContent already.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.AddXml``1(``0,System.Object,System.String,System.String)">
            <summary>
            Adds an object as serialized xml string.
            </summary>
            <remarks>Throws exception if the given object is null, or if the
            serialized xml string is null or empty.</remarks>
            <param name="obj">The object that will be serialized and added as xml string content.</param>
            <param name="name">A name needed when content is a MultipartFormDataContent already.</param>
            <param name="fileName">A file name needed when content is a MultipartFormDataContent already.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.CancelToken``1(``0,System.Threading.CancellationToken)">
            <summary>
            Set the CancellationToken for this request.
            </summary>
            <param name="token">The token.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Url``1(``0,System.String)">
            <summary>
            Sets the URL string for this request.
            </summary>
            <param name="url">The URL string.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.UrlFormat``1(``0,System.Object[])">
            <summary>
            Sets the URL format parameter for this request.
            A test String.Format is done to verify the input objects.
            </summary>
            <param name="objects">The format parameter objects.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.RequestAction``1(``0,System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Map an action over the underlying HttpRequestMessage.
            Can be used to set "exotic" things, that are not exposed by the BaseRestRequest.
            Usage: request.RequestAction(r => r.Content = ...);
            </summary>
            <param name="action">An action that takes a HttpRequestMessage as argument.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.ClientAction``1(``0,System.Action{System.Net.Http.HttpClient})">
            <summary>
            Map an action over the underlying HttpClient.
            Can be used to set "exotic" things, that are not exposed by the BaseRestRequest.
            Usage: request.ClientAction(c => c.Timeout = ...);
            </summary>
            <param name="action">An action that takes a HttpClient as argument.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Basic``1(``0,System.String,System.String)">
            <summary>
            Adds a Http Basic authorization header to the request. 
            The result string is Base64 encoded internally.
            </summary>
            <param name="username">The user name.</param>
            <param name="password">The user password.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Bearer``1(``0,System.String)">
            <summary>
            Adds a Http Bearer authorization header to the request.
            The given token string is Base64 encoded internally.
            </summary>
            <param name="token">The token string.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Param``1(``0,System.String,System.Object,Nulands.Restless.ParameterType)">
            <summary>
            Adds a parameter to the request. Can be a Query, FormUrlEncoded or Url parameter.
            If a value for the given name is already set, the old parameter value is overwritten silently.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value (should be convertible to string).</param>
            <param name="type">The ParameterType.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.UrlParam``1(``0,System.String,System.Object)">
            <summary>
            Adds an url parameter to the request.
            Url parameters are part of the set url string of the form {name}.
            The {name} is replaced by the given value before the request is sent.
            If an url parameter value for the given name already exists the
            old value is overwritten silently.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value (should be convertible to string).</param>
            <returns>this.</returns>
        </member>
        <!-- UngÃ¼ltiger XML-Kommentar wurde fÃ¼r den Member "M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Param``1(``0,System.String,System.Object,System.Boolean)" ignoriert -->
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.QParam``1(``0,System.String,System.Object)">
            <summary>
            Adds a query parameter (?name=value) to the request.
            The parameter-value pair is added to the URL before sending the request.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value (should be convertible to string).</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Header``1(``0,System.String,System.String)">
            <summary>
            Adds a header with a single value to the request.
            </summary>
            <param name="name">The header name.</param>
            <param name="value">The header value (should be convertible to string).</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Header``1(``0,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a header with multiple values to the request.
            </summary>
            <param name="name">The header name.</param>
            <param name="values">The header values (should be convertible to string).</param>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.GetResponseAsync``1(``0)">
            <summary>
            Sends the request and return the raw HttpResponseMessage.
            </summary>
            <returns>Task containing the HttpResponseMessage.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.GetRestResponseAsync``1(``0,System.Action{Nulands.Restless.RestResponse{Nulands.Restless.IVoid}},System.Action{Nulands.Restless.RestResponse{Nulands.Restless.IVoid}})">
            <summary>
            Sends the request and returns a RestResponse with generic type IVoid.
            </summary>
            <param name="successAction">Action that is called on success. (No exceptions and HttpStatus code is ok).</param>
            <param name="errorAction">Action that is called when an error occures. (Exceptions or HttpStatus code not ok).</param>
            <returns>A Task containing the RestRespone. There will be no deserialized data, but the RestResponse.Response 
            (HttpResponseMessage) will be set.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Fetch(Nulands.Restless.RestRequest,System.Action{Nulands.Restless.RestResponse{Nulands.Restless.IVoid}},System.Action{Nulands.Restless.RestResponse{Nulands.Restless.IVoid}})">
            <summary>
            Sends the request and returns the RestResponse containing deserialized data 
            from the HttpResponseMessage.Content if T is not IVoid.
            </summary>
            <typeparam name="T">The type of the deserialized data. Set to IVoid if no deserialization is wanted.</typeparam>
            <param name="successAction">Action that is called on success. (No exceptions and HttpStatus code is ok).</param>
            <param name="errorAction">Action that is called when an error occures. (Exceptions or HttpStatus code not ok).</param>
            <returns>A taks containing the RestResponse with the deserialized data if T is not IVoid and no error occured.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.Fetch``1(Nulands.Restless.RestRequest,System.Action{Nulands.Restless.RestResponse{``0}},System.Action{Nulands.Restless.RestResponse{``0}})">
            <summary>
            Sends the request and returns the RestResponse containing deserialized data 
            from the HttpResponseMessage.Content if T is not IVoid.
            </summary>
            <typeparam name="T">The type of the deserialized data. Set to IVoid if no deserialization is wanted.</typeparam>
            <param name="successAction">Action that is called on success. (No exceptions and HttpStatus code is ok).</param>
            <param name="errorAction">Action that is called when an error occures. (Exceptions or HttpStatus code not ok).</param>
            <returns>A taks containing the RestResponse with the deserialized data if T is not IVoid and no error occured.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.UploadFileBinary``1(Nulands.Restless.RestRequest,System.String,System.String,System.Action{Nulands.Restless.RestResponse{``0}},System.Action{Nulands.Restless.RestResponse{``0}})">
            <summary>
            Uploads a binary file using StreamContent.
            The file is opened by this function.
            </summary>
            <typeparam name="T">The type of the deserialized data. Set to IVoid if no deserialization is wanted.</typeparam>
            <param name="localPath">The path to the file that will be uploaded.</param>
            <param name="contentType">The file content type.</param>
            <param name="successAction">Action that is called on success. (No exceptions and HttpStatus code is ok).</param>
            <param name="errorAction">Action that is called when an error occures. (Exceptions or HttpStatus code not ok).</param>
            <returns>A taks containing the RestResponse with the deserialized data if T is not IVoid and no error occured.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.UploadFileBinary``1(Nulands.Restless.RestRequest,System.IO.Stream,System.String,System.Action{Nulands.Restless.RestResponse{``0}},System.Action{Nulands.Restless.RestResponse{``0}})">
            <summary>
            Uploads a binary (file) stream using StreamContent.
            </summary>
            <typeparam name="T">The type of the deserialized data. Set to IVoid if no deserialization is wanted.</typeparam>
            <param name="streamContent">The (file) stream that will be uploaded.</param>
            <param name="contentType">The file content type.</param>
            <param name="successAction">Action that is called on success. (No exceptions and HttpStatus code is ok).</param>
            <param name="errorAction">Action that is called when an error occures. (Exceptions or HttpStatus code not ok).</param>
            <returns>A taks containing the RestResponse with the deserialized data if T is not IVoid and no error occured.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.UploadFileFormData``1(Nulands.Restless.RestRequest,System.String,System.String,System.Action{Nulands.Restless.RestResponse{``0}},System.Action{Nulands.Restless.RestResponse{``0}})">
            <summary>
            Uploads a binary file using a MultipartFormDataContent and a (sub) StreamContent.
            AddFormUrl() is called before the StreamContent is added to the MultipartFormDataContent.
            AddFormUrl() will add all parameter to the request that are added with Param(..).
            The file is opened by this function.
            </summary>
            <typeparam name="T">The type of the deserialized data. Set to IVoid if no deserialization is wanted.</typeparam>
            <param name="localPath">The path to the file that will be uploaded.</param>
            <param name="contentType">The file content type.</param>
            <param name="successAction">Action that is called on success. (No exceptions and HttpStatus code is ok).</param>
            <param name="errorAction">Action that is called when an error occures. (Exceptions or HttpStatus code not ok).</param>
            <returns>A taks containing the RestResponse with the deserialized data if T is not IVoid and no error occured.</returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.BaseRestRequestExtensions.UploadFileFormData``1(Nulands.Restless.RestRequest,System.IO.Stream,System.String,System.String,System.Action{Nulands.Restless.RestResponse{``0}},System.Action{Nulands.Restless.RestResponse{``0}})">
            <summary>
            Uploads a binary (file) stream using a MultipartFormDataContent and a (sub) StreamContent.
            AddFormUrl() is called before the StreamContent is added to the MultipartFormDataContent.
            AddFormUrl() will add all parameter to the request that are added with Param(..).
            </summary>
            <typeparam name="T">The type of the deserialized data. Set to IVoid if no deserialization is wanted.</typeparam>
            <param name="streamContent">The (file) stream that will be uploaded.</param>
            <param name="contentType">The file content type.</param>
            <param name="localPath">The "path" of the (file) stream that will be uploaded.</param>
            <param name="successAction">Action that is called on success. (No exceptions and HttpStatus code is ok).</param>
            <param name="errorAction">Action that is called when an error occures. (Exceptions or HttpStatus code not ok).</param>
            <returns>A taks containing the RestResponse with the deserialized data if T is not IVoid and no error occured.</returns>
        </member>
        <member name="T:Nulands.Restless.IVoid">
            <summary>
            "Ghost" parameter can be used to indicate that a 
            generic parameter will be unused/left blank.
            Like setting it to "null".
            </summary>
        </member>
        <member name="M:Nulands.Restless.RestlessContext.Get``1(System.String,System.Boolean)">
            <summary>
            Creates and returns a concrete HiDriveRequest instance of the given type.
            If wanted then the Bearer access token header is set for the new request 
            from HiDriveContext.Default.Token.AccessToken.
            After request creation the HiDriveContext.Cancellation is pointed to the cancellation token of the 
            newly created request.
            Usage:
            
            FileCopyRequest request = HiDriveContext.GetXY();
            
            Usage of concrete Files api is easier and shorter.
            
            FileCopyRequest request = Files.Copy();
            
            </summary>
            <typeparam name="T">The concrete type of the wanted HiDriveRequest. Must have default constructor. </typeparam>
            <typeparam name="U">The HiDriveRequest generic parameter type. </typeparam>
            <param name="setAccessToken">When true and HiDriveContext.HasAccessToken() then bearer access token header is set for the new request.</param>
            <returns>The new HiDriveRequest of type T.</returns>
        </member>
        <member name="M:Nulands.Restless.RestlessContext.HasAccessToken">
            <summary>
            Check if a HiDriveContext.Default.Token.AccessToken is set.
            </summary>
            <returns>True if set, false otherwise.</returns>
        </member>
        <member name="P:Nulands.Restless.RestlessContext.Default">
            <summary>
            Get/Set the default HiDriveContext instance.
            Use like 
                HiDriveContext.Default.Token = token; 
            for example.
            </summary>
        </member>
        <member name="P:Nulands.Restless.RestlessContext.DefClientId">
            <summary>
            Get/Set HiDriveContext.Default.Token.ClientId.
            </summary>
        </member>
        <member name="P:Nulands.Restless.RestlessContext.DefClientSecret">
            <summary>
            Get/Set default client secret token.
            </summary>
        </member>
        <member name="P:Nulands.Restless.RestlessContext.AccessToken">
            <summary>
            Get/Set HiDriveContext.Default.Token.AccessToken.
            </summary>
        </member>
        <member name="P:Nulands.Restless.RestlessContext.RefreshToken">
            <summary>
            Get/Set HiDriveContext.Default.Token.RefreshToken.
            </summary>
        </member>
        <!-- UngÃ¼ltiger XML-Kommentar wurde fÃ¼r den Member "P:Nulands.Restless.RestlessContext.Cancellation" ignoriert -->
        <member name="P:Nulands.Restless.RestlessContext.DefAuthCode">
            <summary>
            Get/Set the default authorization code to request a first HiDrive token.
            </summary>
        </member>
        <member name="P:Nulands.Restless.RestlessContext.AuthCode">
            <summary>
            HiDrive strato api authorization code.
            </summary>
        </member>
        <member name="T:Nulands.Restless.Extensions.RestlessExtensions">
            <summary>
            Extensions needed for Restless.
            </summary>
        </member>
        <member name="M:Nulands.Restless.Extensions.RestlessExtensions.ThrowIf``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>
            Throws an ArgumentException if the given predicate returns true for the given object.
            </summary>
            <typeparam name="T">The type of the given object. Must not be set explicit.</typeparam>
            <param name="obj">The object.</param>
            <param name="predicate">the predicate that is called with the given object as argument.</param>
            <param name="msg">The message added to the exception.</param>
            <param name="memberName">The name of the method that called ThrowIf (CallerMemberName).</param>
        </member>
        <member name="M:Nulands.Restless.Extensions.RestlessExtensions.ThrowIfNot``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>
            Throws an ArgumentException if the given predicate returns false for the given object.
            </summary>
            <typeparam name="T">The type of the given object. Must not be set explicit.</typeparam>
            <param name="obj">The object.</param>
            <param name="predicate">the predicate that is called with the given object as argument.</param>
            <param name="msg">The message that is added to the exception if it is thrown.</param>
            <param name="memberName">The name of the method that called ThrowIf (CallerMemberName).</param>
        </member>
        <member name="M:Nulands.Restless.Extensions.RestlessExtensions.ThrowIfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Throws an ArgumentNullException when the given IEnumerable is null, or an ArgumentException if it is empty.
            Can be used for arrays too.
            </summary>
            <typeparam name="T">The type of the given objects inside the IEnumerable. Must not be set explicit.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="msg">The message that is added to the exception if it is thrown.</param>
            <param name="memberName">The name of the method that called ThrowIf (CallerMemberName).</param>
        </member>
        <member name="M:Nulands.Restless.Extensions.RestlessExtensions.ThrowIfNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Throws an ArgumentNullException when the given string is null, or an ArgumentException if it is empty.
            </summary>
            <param name="obj">The string.</param>
            <param name="msg">The message that is added to the exception if it is thrown.</param>
            <param name="memberName">The name of the method that called ThrowIf (CallerMemberName).</param>
        </member>
        <member name="M:Nulands.Restless.Extensions.RestlessExtensions.ThrowIfNotFound(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Treats a string as a file/folder path and throws an exceptin if the file/folder is not found.
            </summary>
            <param name="path">The path string.</param>
            <param name="isFile">If true the given string is a path to a file, otherwise its a path to a folder.</param>
            <param name="msg">The message that is added to the exception if it is thrown.</param>
            <param name="memberName">The name of the method that called ThrowIf (CallerMemberName).</param>
        </member>
        <member name="M:Nulands.Restless.Extensions.RestlessExtensions.ThrowIfNull``1(``0,System.String,System.String)">
            <summary>
            Throws an exception if the given object is null.
            </summary>
            <typeparam name="T">The type of the object. Must not be set explicit.</typeparam>
            <param name="obj">The given object.</param>
            <param name="msg">The message that is added to the exception if it is thrown.</param>
            <param name="memberName">The name of the method that called ThrowIf (CallerMemberName).</param>
        </member>
        <member name="M:Nulands.Restless.Extensions.RestlessExtensions.ThrowIfNullOrToStrEmpty``1(``0,System.String,System.String)">
            <summary>
            Throws an exception if the given object is null or if the obj.ToString() is null or empty.
            </summary>
            <typeparam name="T">The type of the object. Must not be set explicit.</typeparam>
            <param name="obj">The given object.</param>
            <param name="msg">The message that is added to the exception if it is thrown.</param>
            <param name="memberName">The name of the method that called ThrowIf (CallerMemberName).</param>
        </member>
        <member name="M:Nulands.Restless.Extensions.RestlessExtensions.CreateParamStr(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Make a parameter string.
            </summary>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.RestlessExtensions.CreateParamStr(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}})">
            <summary>
            Make a parameter string.
            </summary>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.RestlessExtensions.FormatUrlWithParams(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            
            </summary>
            <param name="url_params"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.RestlessExtensions.CreateRequestUri(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="query_params"></param>
            <param name="param"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Nulands.Restless.Extensions.RestlessExtensions.SetFrom``1(``0,``0,System.String[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="to"></param>
            <param name="from"></param>
            <param name="excludePropertys"></param>
        </member>
        <member name="T:Nulands.Restless.RestResponse`1">
            <summary>
            A class representing a REST response message.
            It contains the raw HttpResponseMessage returned from the request.
            Further it contains the deserialized data if no exception occured, T != IVoid 
            and the response status code matches.
            </summary>
            <typeparam name="T">The type of the data that will be deserialized.</typeparam>
        </member>
        <member name="M:Nulands.Restless.RestResponse`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nulands.Restless.RestResponse`1.#ctor(Nulands.Restless.RestRequest)">
            <summary>
            Constructor.
            </summary>
            <param name="request">Reference to a BaseRestRequest.</param>
        </member>
        <member name="M:Nulands.Restless.RestResponse`1.ThrowIfException">
            <summary>
            If an exception occurred during the request throw it again.
            Usage:
            var data = response.ThrowIfException().Data;
            </summary>
            <returns>this.</returns>
        </member>
        <member name="M:Nulands.Restless.RestResponse`1.Dispose">
            <summary>
            Dispose the request.
            </summary>
        </member>
        <member name="M:Nulands.Restless.RestResponse`1.Dispose(System.Boolean)">
            <summary>
            Underlying dispose method.
            Calls HttpClient and HttpRequestMessage Dispose().
            </summary>
            <param name="disposing">True if should dispose.</param>
        </member>
        <member name="P:Nulands.Restless.RestResponse`1.Request">
            <summary>
            That BaseRestRequest this rest response comes from.
            </summary>
        </member>
        <member name="P:Nulands.Restless.RestResponse`1.Exception">
            <summary>
            The Exception that could be thrown during the request fetching.
            </summary>
        </member>
        <member name="P:Nulands.Restless.RestResponse`1.Response">
            <summary>
            The "raw" HttpResponseMessage.
            </summary>
        </member>
        <member name="P:Nulands.Restless.RestResponse`1.Data">
            <summary>
            The deserialized data if T is not INothing.
            </summary>
        </member>
        <member name="P:Nulands.Restless.RestResponse`1.IsStatusCodeMissmatch">
            <summary>
            Check if the returned status code matches the wanted status code.
            </summary>
        </member>
        <member name="P:Nulands.Restless.RestResponse`1.IsException">
            <summary>
            Check if the request that was producing this response has encountered an exception.
            </summary>
        </member>
        <member name="P:Nulands.Restless.RestResponse`1.IsNothing">
            <summary>
            Check if T is IVoid
            </summary>
        </member>
        <member name="P:Nulands.Restless.RestResponse`1.HasData">
            <summary>
            Check if a deserialized object is available.
            </summary>
        </member>
    </members>
</doc>
